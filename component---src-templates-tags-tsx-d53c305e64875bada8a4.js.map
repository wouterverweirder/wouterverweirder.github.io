{"version":3,"sources":["webpack://@blog/personal-lite/./src/components/post-card/post-card.style.tsx","webpack://@blog/personal-lite/./src/components/post-card/post-card.tsx","webpack://@blog/personal-lite/./src/templates/tags.tsx"],"names":["PostCardWrapper","styled","PostPreview","PostDetails","PostDate","themeGet","PostContent","PostTitle","Excerpt","PostTags","PostCard","image","title","description","url","date","tags","className","imageType","props","addAllClasses","push","join","Link","to","fluid","alt","fixed","dangerouslySetInnerHTML","__html","map","tag","index","key","defaultProps","pageContext","data","allMarkdownRemark","edges","totalCount","node","fields","slug","frontmatter","excerpt"],"mappings":"+OAGaA,EAAkBC,oBAAH,2EAAGA,CAAH,+BAIfC,EAAcD,oBAAH,uEAAGA,CAAH,0RAmBXE,EAAcF,oBAAH,uEAAGA,CAAH,0BAIXG,EAAWH,oBAAH,oEAAGA,CAAH,mlBAOVI,OAAS,mBAAoB,YAwB3BC,EAAcL,oBAAH,uEAAGA,CAAH,+BAIXM,EAAYN,mBAAH,qEAAGA,CAAH,8WAGXI,OAAS,mBAAoB,YAI3BA,OAAS,mBAAoB,YAe7BG,EAAUP,kBAAH,mEAAGA,CAAH,mKACLI,OAAS,cAAe,OAC5BA,OAAS,YAAa,YASpBI,EAAWR,oBAAH,oEAAGA,CAAH,gTAWRI,OAAS,UAAW,Y,8ECnF3BK,EAAmD,SAAC,GAUnD,IATLC,EASI,EATJA,MACAC,EAQI,EARJA,MACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,IACAC,EAKI,EALJA,KACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,UACGC,GACC,YAEEC,EAAgB,CAAC,aAOvB,OAJIH,GACFG,EAAcC,KAAKJ,GAInB,gBAACjB,EAAD,eAAiBiB,UAAWG,EAAcE,KAAK,MAAUH,GAC7C,MAATR,EAAgB,KACf,gBAACT,EAAD,CAAae,UAAU,gBACrB,gBAAC,EAAAM,KAAD,CAAMC,GAAIV,GACO,UAAdI,EACC,gBAAC,IAAD,CAAKO,MAAOd,EAAOe,IAAI,iBAEvB,gBAAC,IAAD,CAAKC,MAAOhB,EAAOe,IAAI,mBAM/B,gBAACvB,EAAD,CAAac,UAAU,gBACpBF,GACC,gBAACX,EAAD,CACEwB,wBAAyB,CACvBC,OAAQd,GAEVE,UAAU,cAId,gBAACX,EAAD,CAAaW,UAAU,gBACrB,gBAACV,EAAD,CAAWU,UAAU,cACnB,gBAAC,EAAAM,KAAD,CAAMC,GAAIV,GAAMF,IAEjBC,GACC,gBAACL,EAAD,CACEoB,wBAAyB,CACvBC,OAAQhB,GAEVI,UAAU,YAIL,MAARD,EAAe,KACd,gBAACP,EAAD,CAAUQ,UAAU,aACjBD,EAAKc,KAAI,SAACC,EAAaC,GAAd,OACR,gBAAC,EAAAT,KAAD,CAAMU,IAAKD,EAAOR,GAAE,SAAW,IAAYO,GAAvB,KAApB,IACOA,WAWvBrB,EAASwB,aAAe,CACtBhB,UAAW,SAGb,S,+FClEA,UA5Ba,SAAC,GAAgC,IAA9BiB,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,KACnBL,EAAQI,EAARJ,IACR,EAA8BK,EAAKC,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WAEf,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAK3B,MAAOmB,EAAKlB,YAAW,mBAAqB0B,EAArB,UAE5B,gBAAC,KAAD,KACE,gBAAC,KAAD,KACE,gBAAC,KAAD,KAAUR,GADZ,mBAEsBQ,EAFtB,SAICD,EAAMR,KAAI,gBAAGU,EAAH,EAAGA,KAAH,EAASR,MAAT,OACT,gBAAC,IAAD,CACEC,IAAKO,EAAKC,OAAOC,KACjB9B,MAAO4B,EAAKG,YAAY/B,MACxBE,IAAK0B,EAAKC,OAAOC,KACjB7B,YAAa2B,EAAKG,YAAY9B,aAAe2B,EAAKI,QAClD7B,KAAMyB,EAAKG,YAAY5B,KACvBC,KAAMwB,EAAKG,YAAY3B","file":"component---src-templates-tags-tsx-d53c305e64875bada8a4.js","sourcesContent":["import styled from 'styled-components';\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const PostCardWrapper = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport const PostPreview = styled.div`\r\n  margin-bottom: 45px;\r\n  position: relative;\r\n  img {\r\n    border-radius: 3px;\r\n  }\r\n\r\n  &:before {\r\n    content: '';\r\n    position: absolute;\r\n    width: 80%;\r\n    height: 80%;\r\n    background-color: #757575;\r\n    bottom: 0;\r\n    left: 10%;\r\n    filter: blur(15px);\r\n  }\r\n`;\r\n\r\nexport const PostDetails = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const PostDate = styled.div`\r\n  font-size: 90px;\r\n  font-weight: 700;\r\n  text-align: center;\r\n  padding: 30px 35px 15px 35px;\r\n  margin-right: 20px;\r\n  line-height: 1;\r\n  color: ${themeGet('colors.textColor', '#292929')};\r\n  @media (max-width: 1200px) {\r\n    font-size: 70px;\r\n    padding: 25px 25px 15px 25px;\r\n    margin-right: 35px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 56px;\r\n    padding: 20px 20px 15px 20px;\r\n    margin-right: 25px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    display: none;\r\n  }\r\n\r\n  > span {\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    display: block;\r\n    margin-top: 12px;\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\n\r\nexport const PostContent = styled.div`\r\n  align-self: center;\r\n`;\r\n\r\nexport const PostTitle = styled.h2`\r\n  font-size: 30px;\r\n  font-weight: 700;\r\n  color: ${themeGet('colors.textColor', '#292929')};\r\n  line-height: 1.53;\r\n  margin-bottom: 10px;\r\n  a {\r\n    color: ${themeGet('colors.textColor', '#292929')};\r\n  }\r\n  @media (max-width: 1200px) {\r\n    font-size: 26px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 21px;\r\n    margin-bottom: 12px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    font-size: 20px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const Excerpt = styled.p`\r\n  font-size: ${themeGet('fontSizes.3', '15')}px;\r\n  color: ${themeGet('textColor', '#292929')};\r\n  font-weight: 400;\r\n  line-height: 2;\r\n  margin-bottom: 0;\r\n  @media (max-width: 990px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nexport const PostTags = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-top: 15px;\r\n\r\n  a {\r\n    display: block;\r\n    margin-right: 30px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: ${themeGet('primary', '#D10068')};\r\n    @media (max-width: 990px) {\r\n      font-size: 13px;\r\n      margin-right: 25px;\r\n    }\r\n  }\r\n`;\r\n","import * as React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport _ from 'lodash';\r\nimport Img from 'gatsby-image';\r\nimport {\r\n  PostCardWrapper,\r\n  PostPreview,\r\n  PostDetails,\r\n  PostDate,\r\n  PostTitle,\r\n  Excerpt,\r\n  PostContent,\r\n  PostTags,\r\n} from './post-card.style';\r\n\r\ninterface PostCardProps {\r\n  image?: any;\r\n  title: string;\r\n  description?: string;\r\n  url: string;\r\n  date?: string;\r\n  tags?: [];\r\n  className?: string;\r\n  imageType?: 'fixed' | 'fluid';\r\n}\r\n\r\nconst PostCard: React.FunctionComponent<PostCardProps> = ({\r\n  image,\r\n  title,\r\n  description,\r\n  url,\r\n  date,\r\n  tags,\r\n  className,\r\n  imageType,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = ['post_card'];\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  return (\r\n    <PostCardWrapper className={addAllClasses.join(' ')} {...props}>\r\n      {image == null ? null : (\r\n        <PostPreview className=\"post_preview\">\r\n          <Link to={url}>\r\n            {imageType === 'fluid' ? (\r\n              <Img fluid={image} alt=\"post preview\" />\r\n            ) : (\r\n              <Img fixed={image} alt=\"post preview\" />\r\n            )}\r\n          </Link>\r\n        </PostPreview>\r\n      )}\r\n\r\n      <PostDetails className=\"post_details\">\r\n        {date && (\r\n          <PostDate\r\n            dangerouslySetInnerHTML={{\r\n              __html: date,\r\n            }}\r\n            className=\"post_date\"\r\n          />\r\n        )}\r\n\r\n        <PostContent className=\"post_content\">\r\n          <PostTitle className=\"post_title\">\r\n            <Link to={url}>{title}</Link>\r\n          </PostTitle>\r\n          {description && (\r\n            <Excerpt\r\n              dangerouslySetInnerHTML={{\r\n                __html: description,\r\n              }}\r\n              className=\"excerpt\"\r\n            />\r\n          )}\r\n\r\n          {tags == null ? null : (\r\n            <PostTags className=\"post_tags\">\r\n              {tags.map((tag: string, index: number) => (\r\n                <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\r\n                  {`#${tag}`}\r\n                </Link>\r\n              ))}\r\n            </PostTags>\r\n          )}\r\n        </PostContent>\r\n      </PostDetails>\r\n    </PostCardWrapper>\r\n  );\r\n};\r\n\r\nPostCard.defaultProps = {\r\n  imageType: 'fluid',\r\n};\r\n\r\nexport default PostCard;\r\n","import React from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\nimport Layout from '../components/layout';\r\nimport PostCard from '../components/post-card/post-card';\r\nimport SEO from '../components/seo';\r\nimport { TagPostsWrapper, TagPageHeading, TagName } from './templates.style';\r\n\r\nconst Tags = ({ pageContext, data }: any) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={tag} description={`A collection of ${totalCount} post`} />\r\n\r\n      <TagPostsWrapper>\r\n        <TagPageHeading>\r\n          <TagName>{tag}</TagName>\r\n          {`A collection of ${totalCount} post`}\r\n        </TagPageHeading>\r\n        {edges.map(({ node, index }: any) => (\r\n          <PostCard\r\n            key={node.fields.slug}\r\n            title={node.frontmatter.title}\r\n            url={node.fields.slug}\r\n            description={node.frontmatter.description || node.excerpt}\r\n            date={node.frontmatter.date}\r\n            tags={node.frontmatter.tags}\r\n          />\r\n        ))}\r\n      </TagPostsWrapper>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt(pruneLength: 300)\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"DD [<span>] MMMM YYYY [</span>]\")\r\n            title\r\n            tags\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}
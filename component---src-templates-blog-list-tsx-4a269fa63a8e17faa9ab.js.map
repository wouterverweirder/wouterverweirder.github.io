{"version":3,"sources":["webpack://@blog/personal-lite/./src/components/pagination/pagination.style.tsx","webpack://@blog/personal-lite/./src/components/pagination/pagination.tsx","webpack://@blog/personal-lite/./src/components/post-card-minimal/post-card-minimal.style.tsx","webpack://@blog/personal-lite/./src/components/post-card-minimal/post-card-minimal.tsx","webpack://@blog/personal-lite/./src/templates/blog-list.tsx"],"names":["PaginationWrapper","styled","PrevPage","themeGet","NextPage","PageNumber","prevLink","nextLink","currentPage","totalPage","className","props","Link","to","PostCardWrapper","PostPreview","PostDetails","PostDate","PostContent","PostTitle","Excerpt","PostTags","PostDateAndPreview","ReadMore","PostCardMinimal","image","title","description","url","date","tags","imageType","addAllClasses","push","join","dangerouslySetInnerHTML","__html","fluid","alt","fixed","map","tag","index","key","defaultProps","Posts","data","allMarkdownRemark","edges","pageContext","numPages","isFirst","isLast","prevPage","toString","nextPage","PrevLink","NextLink","node","fields","slug","frontmatter","hasCover","cover","childImageSharp","excerpt"],"mappings":"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","file":"component---src-templates-blog-list-tsx-4a269fa63a8e17faa9ab.js","sourcesContent":["import styled from 'styled-components';\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const PaginationWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const PrevPage = styled.div`\r\n  min-width: 32px;\r\n  a {\r\n    width: 32px;\r\n    height: 32px;\r\n    color: ${themeGet('colors.textColor', '#292929')};\r\n    border-radius: 50%;\r\n    background-color: #f3f3f3;\r\n    font-size: 18px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: 0.15s ease-in-out;\r\n    svg {\r\n      display: block;\r\n    }\r\n    &:hover {\r\n      color: #fff;\r\n      background-color: ${themeGet('colors.primary', '#D10068')};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NextPage = styled.div`\r\n  min-width: 32px;\r\n  a {\r\n    width: 32px;\r\n    height: 32px;\r\n    color: ${themeGet('colors.textColor', '#292929')};\r\n    border-radius: 50%;\r\n    background-color: #f3f3f3;\r\n    font-size: 18px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: 0.15s ease-in-out;\r\n    svg {\r\n      display: block;\r\n    }\r\n    &:hover {\r\n      color: #fff;\r\n      background-color: ${themeGet('colors.primary', '#D10068')};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PageNumber = styled.div``;\r\n","import * as React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport { IoMdArrowRoundBack, IoMdArrowRoundForward } from 'react-icons/io';\r\nimport {\r\n  PaginationWrapper,\r\n  PrevPage,\r\n  NextPage,\r\n  PageNumber,\r\n} from './pagination.style';\r\n\r\ntype PaginationProps = {\r\n  prevLink?: string | undefined | null | boolean;\r\n  nextLink?: string | undefined | null | boolean;\r\n  currentPage: string;\r\n  totalPage: string;\r\n  className?: string;\r\n};\r\n\r\nconst Pagination: React.FunctionComponent<PaginationProps> = ({\r\n  prevLink,\r\n  nextLink,\r\n  currentPage,\r\n  totalPage,\r\n  className,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <PaginationWrapper {...props} className={className}>\r\n      <PrevPage>\r\n        {prevLink && (\r\n          <Link to={`${prevLink}`} aria-label=\"Prev\">\r\n            <IoMdArrowRoundBack />\r\n          </Link>\r\n        )}\r\n      </PrevPage>\r\n\r\n      <PageNumber>{`Page ${currentPage} Of ${totalPage}`}</PageNumber>\r\n\r\n      <NextPage>\r\n        {nextLink && (\r\n          <Link to={`${nextLink}`} aria-label=\"Next\">\r\n            <IoMdArrowRoundForward />\r\n          </Link>\r\n        )}\r\n      </NextPage>\r\n    </PaginationWrapper>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import styled from 'styled-components';\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const PostCardWrapper = styled.div`\r\n  position: relative;\r\n  &:hover {\r\n    .post_preview {\r\n      transform: translateY(0);\r\n    }\r\n    .post_date {\r\n      transform: translateY(100%);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PostPreview = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transform: translateY(-100%);\r\n  transition: 0.35s ease-in-out;\r\n  img {\r\n    border-radius: 3px;\r\n  }\r\n  @media (max-width: 1024px) {\r\n    transform: translateY(0);\r\n  }\r\n  @media (max-width: 575px) {\r\n    margin-bottom: 30px;\r\n    width: auto;\r\n    height: auto;\r\n    position: relative;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\nexport const PostDetails = styled.div`\r\n  display: flex;\r\n  @media (max-width: 575px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const PostDate = styled.div`\r\n  font-size: 90px;\r\n  font-weight: 700;\r\n  text-align: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  line-height: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: ${themeGet('colors.textColor', '#292929')};\r\n  transition: 0.35s ease-in-out;\r\n  @media (max-width: 1200px) {\r\n    font-size: 70px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 56px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    display: none;\r\n  }\r\n\r\n  > span {\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    display: block;\r\n    margin-top: 12px;\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\n\r\nexport const PostContent = styled.div`\r\n  align-self: center;\r\n`;\r\n\r\nexport const PostTitle = styled.h2`\r\n  font-size: 21px;\r\n  font-weight: 700;\r\n  color: ${themeGet('colors.textColor', '#292929')};\r\n  line-height: 1.53;\r\n  margin-bottom: 10px;\r\n  font-family: 'Fira Sans', sans-serif;\r\n  a {\r\n    color: ${themeGet('colors.textColor', '#292929')};\r\n  }\r\n  @media (max-width: 1200px) {\r\n    font-size: 21px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    font-size: 19px;\r\n    margin-bottom: 12px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    font-size: 17px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport const Excerpt = styled.p`\r\n  font-size: ${themeGet('fontSizes.3', '15')}px;\r\n  color: ${themeGet('textColor', '#292929')};\r\n  font-weight: 400;\r\n  line-height: 2;\r\n  margin-bottom: 0;\r\n  @media (max-width: 990px) {\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nexport const PostTags = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n\r\n  a {\r\n    display: block;\r\n    margin-right: 30px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: ${themeGet('primary', '#D10068')};\r\n    @media (max-width: 990px) {\r\n      font-size: 13px;\r\n      margin-right: 25px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PostDateAndPreview = styled.div`\r\n  position: relative;\r\n  margin-right: 45px;\r\n  flex-shrink: 0;\r\n  overflow: hidden;\r\n  height: 170px;\r\n  width: 170px;\r\n  @media (max-width: 1200px) {\r\n    margin-right: 35px;\r\n  }\r\n  @media (max-width: 990px) {\r\n    margin-right: 25px;\r\n  }\r\n  @media (max-width: 575px) {\r\n    height: auto;\r\n    width: auto;\r\n  }\r\n`;\r\n\r\nexport const ReadMore = styled.div`\r\n  margin-top: 16px;\r\n  a {\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    color: ${themeGet('textColor', '#292929')};\r\n    transition: 0.15s ease-in-out;\r\n    &:hover {\r\n      color: ${themeGet('primary', '#D10068')};\r\n    }\r\n  }\r\n`;\r\n","import * as React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport _ from 'lodash';\r\nimport Img from 'gatsby-image';\r\nimport {\r\n  PostCardWrapper,\r\n  PostPreview,\r\n  PostDetails,\r\n  PostDate,\r\n  PostTitle,\r\n  Excerpt,\r\n  PostContent,\r\n  PostTags,\r\n  PostDateAndPreview,\r\n  ReadMore,\r\n} from './post-card-minimal.style';\r\n\r\ninterface PostCardMinimalProps {\r\n  image?: any;\r\n  title: string;\r\n  description?: string;\r\n  url: string;\r\n  date?: string;\r\n  tags?: [];\r\n  className?: string;\r\n  imageType?: 'fixed' | 'fluid';\r\n}\r\n\r\nconst PostCardMinimal: React.FunctionComponent<PostCardMinimalProps> = ({\r\n  image,\r\n  title,\r\n  description,\r\n  url,\r\n  date,\r\n  tags,\r\n  className,\r\n  imageType,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = ['post_card'];\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  return (\r\n    <PostCardWrapper className={addAllClasses.join(' ')} {...props}>\r\n      <PostDetails className=\"post_details\">\r\n        <PostDateAndPreview>\r\n          {date && (\r\n            <PostDate\r\n              dangerouslySetInnerHTML={{\r\n                __html: date,\r\n              }}\r\n              className=\"post_date\"\r\n            />\r\n          )}\r\n          {image == null ? null : (\r\n            <PostPreview className=\"post_preview\">\r\n              <Link to={url}>\r\n                {imageType === 'fluid' ? (\r\n                  <Img fluid={image} alt=\"post preview\" />\r\n                ) : (\r\n                  <Img fixed={image} alt=\"post preview\" />\r\n                )}\r\n              </Link>\r\n            </PostPreview>\r\n          )}\r\n        </PostDateAndPreview>\r\n\r\n        <PostContent className=\"post_content\">\r\n          {tags == null ? null : (\r\n            <PostTags className=\"post_tags\">\r\n              {tags.map((tag: string, index: number) => (\r\n                <Link key={index} to={`/tags/${_.kebabCase(tag)}/`}>\r\n                  {`#${tag}`}\r\n                </Link>\r\n              ))}\r\n            </PostTags>\r\n          )}\r\n          <PostTitle className=\"post_title\">\r\n            <Link to={url}>{title}</Link>\r\n          </PostTitle>\r\n          {description && (\r\n            <Excerpt\r\n              dangerouslySetInnerHTML={{\r\n                __html: description,\r\n              }}\r\n              className=\"excerpt\"\r\n            />\r\n          )}\r\n          <ReadMore>\r\n            <Link to={url}>Read More</Link>\r\n          </ReadMore>\r\n        </PostContent>\r\n      </PostDetails>\r\n    </PostCardWrapper>\r\n  );\r\n};\r\n\r\nPostCardMinimal.defaultProps = {\r\n  imageType: 'fluid',\r\n};\r\n\r\nexport default PostCardMinimal;\r\n","import * as React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport PostCardMinimal from '../components/post-card-minimal/post-card-minimal';\r\nimport Pagination from '../components/pagination/pagination';\r\nimport Layout from '../components/layout';\r\nimport SEO from '../components/seo';\r\nimport { BlogPostsWrapper } from './templates.style';\r\n\r\nconst BlogList = (props: any) => {\r\n  const { data } = props;\r\n  const Posts = data.allMarkdownRemark.edges;\r\n  const { currentPage, numPages } = props.pageContext;\r\n  const isFirst = currentPage === 1;\r\n  const isLast = currentPage === numPages;\r\n  const prevPage =\r\n    currentPage - 1 === 1 ? '/page/1' : `/page/${(currentPage - 1).toString()}`;\r\n  const nextPage = `/page/${(currentPage + 1).toString()}`;\r\n  const PrevLink = !isFirst && prevPage;\r\n  const NextLink = !isLast && nextPage;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={`Page ${currentPage}`} />\r\n\r\n      <BlogPostsWrapper>\r\n        {Posts.map(({ node }: any) => {\r\n          return (\r\n            <PostCardMinimal\r\n              key={node.fields.slug}\r\n              title={node.frontmatter.title || node.fields.slug}\r\n              image={\r\n                node.frontmatter.hasCover\r\n                  ? node.frontmatter.cover.childImageSharp.fluid\r\n                  : null\r\n              }\r\n              url={node.fields.slug}\r\n              description={node.frontmatter.description || node.excerpt}\r\n              date={node.frontmatter.date}\r\n              tags={node.frontmatter.tags}\r\n            />\r\n          );\r\n        })}\r\n\r\n        <Pagination\r\n          prevLink={PrevLink}\r\n          nextLink={NextLink}\r\n          currentPage={`${currentPage}`}\r\n          totalPage={`${numPages}`}\r\n        />\r\n      </BlogPostsWrapper>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default BlogList;\r\n\r\nexport const pageQuery = graphql`\r\n  query($skip: Int!, $limit: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    sitePage {\r\n      path\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt(pruneLength: 300)\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"DD [<span>] MMMM YYYY [</span>]\")\r\n            title\r\n            description\r\n            tags\r\n            hasCover\r\n            cover {\r\n              childImageSharp {\r\n                fluid(maxWidth: 170, maxHeight: 170, quality: 90) {\r\n                  ...GatsbyImageSharpFluid_withWebp_tracedSVG\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}